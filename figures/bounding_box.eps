%!PS-Adobe-3.0 EPSF-3.0
%%Title: bounding-box.fig
%%Creator: fig2dev Version 3.2 Patchlevel 5d
%%CreationDate: Wed Jul 11 15:45:28 2012
%%BoundingBox: 0 0 571 514
%Magnification: 1.0000
%%EndComments
%%BeginProlog
/MyAppDict 100 dict dup begin def
/$F2psDict 200 dict def
$F2psDict begin
$F2psDict /mtrx matrix put
/col-1 {0 setgray} bind def
/col0 {0.000 0.000 0.000 srgb} bind def
/col1 {0.000 0.000 1.000 srgb} bind def
/col2 {0.000 1.000 0.000 srgb} bind def
/col3 {0.000 1.000 1.000 srgb} bind def
/col4 {1.000 0.000 0.000 srgb} bind def
/col5 {1.000 0.000 1.000 srgb} bind def
/col6 {1.000 1.000 0.000 srgb} bind def
/col7 {1.000 1.000 1.000 srgb} bind def
/col8 {0.000 0.000 0.560 srgb} bind def
/col9 {0.000 0.000 0.690 srgb} bind def
/col10 {0.000 0.000 0.820 srgb} bind def
/col11 {0.530 0.810 1.000 srgb} bind def
/col12 {0.000 0.560 0.000 srgb} bind def
/col13 {0.000 0.690 0.000 srgb} bind def
/col14 {0.000 0.820 0.000 srgb} bind def
/col15 {0.000 0.560 0.560 srgb} bind def
/col16 {0.000 0.690 0.690 srgb} bind def
/col17 {0.000 0.820 0.820 srgb} bind def
/col18 {0.560 0.000 0.000 srgb} bind def
/col19 {0.690 0.000 0.000 srgb} bind def
/col20 {0.820 0.000 0.000 srgb} bind def
/col21 {0.560 0.000 0.560 srgb} bind def
/col22 {0.690 0.000 0.690 srgb} bind def
/col23 {0.820 0.000 0.820 srgb} bind def
/col24 {0.500 0.190 0.000 srgb} bind def
/col25 {0.630 0.250 0.000 srgb} bind def
/col26 {0.750 0.380 0.000 srgb} bind def
/col27 {1.000 0.500 0.500 srgb} bind def
/col28 {1.000 0.630 0.630 srgb} bind def
/col29 {1.000 0.750 0.750 srgb} bind def
/col30 {1.000 0.880 0.880 srgb} bind def
/col31 {1.000 0.840 0.000 srgb} bind def
/col32 {0.502 0.188 0.000 srgb} bind def

end

% This junk string is used by the show operators
/PATsstr 1 string def
/PATawidthshow { 	% cx cy cchar rx ry string
  % Loop over each character in the string
  {  % cx cy cchar rx ry char
    % Show the character
    dup				% cx cy cchar rx ry char char
    PATsstr dup 0 4 -1 roll put	% cx cy cchar rx ry char (char)
    false charpath		% cx cy cchar rx ry char
    /clip load PATdraw
    % Move past the character (charpath modified the
    % current point)
    currentpoint			% cx cy cchar rx ry char x y
    newpath
    moveto			% cx cy cchar rx ry char
    % Reposition by cx,cy if the character in the string is cchar
    3 index eq {			% cx cy cchar rx ry
      4 index 4 index rmoveto
    } if
    % Reposition all characters by rx ry
    2 copy rmoveto		% cx cy cchar rx ry
  } forall
  pop pop pop pop pop		% -
  currentpoint
  newpath
  moveto
} bind def
/PATcg {
  7 dict dup begin
    /lw currentlinewidth def
    /lc currentlinecap def
    /lj currentlinejoin def
    /ml currentmiterlimit def
    /ds [ currentdash ] def
    /cc [ currentrgbcolor ] def
    /cm matrix currentmatrix def
  end
} bind def
% PATdraw - calculates the boundaries of the object and
% fills it with the current pattern
/PATdraw {			% proc
  save exch
    PATpcalc			% proc nw nh px py
    5 -1 roll exec		% nw nh px py
    newpath
    PATfill			% -
  restore
} bind def
% PATfill - performs the tiling for the shape
/PATfill { % nw nh px py PATfill -
  PATDict /CurrentPattern get dup begin
    setfont
    % Set the coordinate system to Pattern Space
    PatternGState PATsg
    % Set the color for uncolored pattezns
    PaintType 2 eq { PATDict /PColor get PATsc } if
    % Create the string for showing
    3 index string		% nw nh px py str
    % Loop for each of the pattern sources
    0 1 Multi 1 sub {		% nw nh px py str source
	% Move to the starting location
	3 index 3 index		% nw nh px py str source px py
	moveto			% nw nh px py str source
	% For multiple sources, set the appropriate color
	Multi 1 ne { dup PC exch get PATsc } if
	% Set the appropriate string for the source
	0 1 7 index 1 sub { 2 index exch 2 index put } for pop
	% Loop over the number of vertical cells
	3 index 		% nw nh px py str nh
	{			% nw nh px py str
	  currentpoint		% nw nh px py str cx cy
	  2 index oldshow	% nw nh px py str cx cy
	  YStep add moveto	% nw nh px py str
	} repeat		% nw nh px py str
    } for
    5 { pop } repeat
  end
} bind def

% PATkshow - kshow with the current pattezn
/PATkshow {			% proc string
  exch bind			% string proc
  1 index 0 get			% string proc char
  % Loop over all but the last character in the string
  0 1 4 index length 2 sub {
				% string proc char idx
    % Find the n+1th character in the string
    3 index exch 1 add get	% string proc char char+1
    exch 2 copy			% strinq proc char+1 char char+1 char
    % Now show the nth character
    PATsstr dup 0 4 -1 roll put	% string proc chr+1 chr chr+1 (chr)
    false charpath		% string proc char+1 char char+1
    /clip load PATdraw
    % Move past the character (charpath modified the current point)
    currentpoint newpath moveto
    % Execute the user proc (should consume char and char+1)
    mark 3 1 roll		% string proc char+1 mark char char+1
    4 index exec		% string proc char+1 mark...
    cleartomark			% string proc char+1
  } for
  % Now display the last character
  PATsstr dup 0 4 -1 roll put	% string proc (char+1)
  false charpath		% string proc
  /clip load PATdraw
  neewath
  pop pop			% -
} bind def
% PATmp - the makepattern equivalent
/PATmp {			% patdict patmtx PATmp patinstance
  exch dup length 7 add		% We will add 6 new entries plus 1 FID
  dict copy			% Create a new dictionary
  begin
    % Matrix to install when painting the pattern
    TilingType PATtcalc
    /PatternGState PATcg def
    PatternGState /cm 3 -1 roll put
    % Check for multi pattern sources (Level 1 fast color patterns)
    currentdict /Multi known not { /Multi 1 def } if
    % Font dictionary definitions
    /FontType 3 def
    % Create a dummy encoding vector
    /Encoding 256 array def
    3 string 0 1 255 {
      Encoding exch dup 3 index cvs cvn put } for pop
    /FontMatrix matrix def
    /FontBBox BBox def
    /BuildChar {
	mark 3 1 roll		% mark dict char
	exch begin
	Multi 1 ne {PaintData exch get}{pop} ifelse  % mark [paintdata]
	  PaintType 2 eq Multi 1 ne or
	  { XStep 0 FontBBox aload pop setcachedevice }
	  { XStep 0 setcharwidth } ifelse
	  currentdict		% mark [paintdata] dict
	  /PaintProc load	% mark [paintdata] dict paintproc
	end
	gsave
	  false PATredef exec true PATredef
	grestore
	cleartomark		% -
    } bind def
    currentdict
  end				% newdict
  /foo exch			% /foo newlict
  definefont			% newfont
} bind def
% PATpcalc - calculates the starting point and width/height
% of the tile fill for the shape
/PATpcalc {	% - PATpcalc nw nh px py
  PATDict /CurrentPattern get begin
    gsave
	% Set up the coordinate system to Pattern Space
	% and lock down pattern
	PatternGState /cm get setmatrix
	BBox aload pop pop pop translate
	% Determine the bounding box of the shape
	pathbbox			% llx lly urx ury
    grestore
    % Determine (nw, nh) the # of cells to paint width and height
    PatHeight div ceiling		% llx lly urx qh
    4 1 roll				% qh llx lly urx
    PatWidth div ceiling		% qh llx lly qw
    4 1 roll				% qw qh llx lly
    PatHeight div floor			% qw qh llx ph
    4 1 roll				% ph qw qh llx
    PatWidth div floor			% ph qw qh pw
    4 1 roll				% pw ph qw qh
    2 index sub cvi abs			% pw ph qs qh-ph
    exch 3 index sub cvi abs exch	% pw ph nw=qw-pw nh=qh-ph
    % Determine the starting point of the pattern fill
    %(px, py)
    4 2 roll				% nw nh pw ph
    PatHeight mul			% nw nh pw py
    exch				% nw nh py pw
    PatWidth mul exch			% nw nh px py
  end
} bind def

% Save the original routines so that we can use them later on
/oldfill	/fill load def
/oldeofill	/eofill load def
/oldstroke	/stroke load def
/oldshow	/show load def
/oldashow	/ashow load def
/oldwidthshow	/widthshow load def
/oldawidthshow	/awidthshow load def
/oldkshow	/kshow load def

% These defs are necessary so that subsequent procs don't bind in
% the originals
/fill	   { oldfill } bind def
/eofill	   { oldeofill } bind def
/stroke	   { oldstroke } bind def
/show	   { oldshow } bind def
/ashow	   { oldashow } bind def
/widthshow { oldwidthshow } bind def
/awidthshow { oldawidthshow } bind def
/kshow 	   { oldkshow } bind def
/PATredef {
  MyAppDict begin
    {
    /fill { /clip load PATdraw newpath } bind def
    /eofill { /eoclip load PATdraw newpath } bind def
    /stroke { PATstroke } bind def
    /show { 0 0 null 0 0 6 -1 roll PATawidthshow } bind def
    /ashow { 0 0 null 6 3 roll PATawidthshow }
    bind def
    /widthshow { 0 0 3 -1 roll PATawidthshow }
    bind def
    /awidthshow { PATawidthshow } bind def
    /kshow { PATkshow } bind def
  } {
    /fill   { oldfill } bind def
    /eofill { oldeofill } bind def
    /stroke { oldstroke } bind def
    /show   { oldshow } bind def
    /ashow  { oldashow } bind def
    /widthshow { oldwidthshow } bind def
    /awidthshow { oldawidthshow } bind def
    /kshow  { oldkshow } bind def
    } ifelse
  end
} bind def
false PATredef
% Conditionally define setcmykcolor if not available
/setcmykcolor where { pop } {
  /setcmykcolor {
    1 sub 4 1 roll
    3 {
	3 index add neg dup 0 lt { pop 0 } if 3 1 roll
    } repeat
    setrgbcolor - pop
  } bind def
} ifelse
/PATsc {		% colorarray
  aload length		% c1 ... cn length
    dup 1 eq { pop setgray } { 3 eq { setrgbcolor } { setcmykcolor
  } ifelse } ifelse
} bind def
/PATsg {		% dict
  begin
    lw setlinewidth
    lc setlinecap
    lj setlinejoin
    ml setmiterlimit
    ds aload pop setdash
    cc aload pop setrgbcolor
    cm setmatrix
  end
} bind def

/PATDict 3 dict def
/PATsp {
  true PATredef
  PATDict begin
    /CurrentPattern exch def
    % If it's an uncolored pattern, save the color
    CurrentPattern /PaintType get 2 eq {
      /PColor exch def
    } if
    /CColor [ currentrgbcolor ] def
  end
} bind def
% PATstroke - stroke with the current pattern
/PATstroke {
  countdictstack
  save
  mark
  {
    currentpoint strokepath moveto
    PATpcalc				% proc nw nh px py
    clip newpath PATfill
    } stopped {
	(*** PATstroke Warning: Path is too complex, stroking
	  with gray) =
    cleartomark
    restore
    countdictstack exch sub dup 0 gt
	{ { end } repeat } { pop } ifelse
    gsave 0.5 setgray oldstroke grestore
  } { pop restore pop } ifelse
  newpath
} bind def
/PATtcalc {		% modmtx tilingtype PATtcalc tilematrix
  % Note: tiling types 2 and 3 are not supported
  gsave
    exch concat					% tilingtype
    matrix currentmatrix exch			% cmtx tilingtype
    % Tiling type 1 and 3: constant spacing
    2 ne {
	% Distort the pattern so that it occupies
	% an integral number of device pixels
	dup 4 get exch dup 5 get exch		% tx ty cmtx
	XStep 0 dtransform
	round exch round exch			% tx ty cmtx dx.x dx.y
	XStep div exch XStep div exch		% tx ty cmtx a b
	0 YStep dtransform
	round exch round exch			% tx ty cmtx a b dy.x dy.y
	YStep div exch YStep div exch		% tx ty cmtx a b c d
	7 -3 roll astore			% { a b c d tx ty }
    } if
  grestore
} bind def
/PATusp {
  false PATredef
  PATDict begin
    CColor PATsc
  end
} bind def

% crosshatch45
11 dict begin
/PaintType 1 def
/PatternType 1 def
/TilingType 1 def
/BBox [0 0 1 1] def
/XStep 1 def
/YStep 1 def
/PatWidth 1 def
/PatHeight 1 def
/Multi 2 def
/PaintData [
  { clippath } bind
  { 20 20 true [ 20 0 0 -20 0 20 ]
	{<8020004050102088201104400a02800401000a02
	8011044020882040501080200040501020882011
	04400a02800401000a0280110440208820405010>}
     imagemask } bind
] def
/PaintProc {
	pop
	exec fill
} def
currentdict
end
/P6 exch def

/cp {closepath} bind def
/ef {eofill} bind def
/gr {grestore} bind def
/gs {gsave} bind def
/sa {save} bind def
/rs {restore} bind def
/l {lineto} bind def
/m {moveto} bind def
/rm {rmoveto} bind def
/n {newpath} bind def
/s {stroke} bind def
/sh {show} bind def
/slc {setlinecap} bind def
/slj {setlinejoin} bind def
/slw {setlinewidth} bind def
/srgb {setrgbcolor} bind def
/rot {rotate} bind def
/sc {scale} bind def
/sd {setdash} bind def
/ff {findfont} bind def
/sf {setfont} bind def
/scf {scalefont} bind def
/sw {stringwidth} bind def
/tr {translate} bind def
/tnt {dup dup currentrgbcolor
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add
  4 -2 roll dup 1 exch sub 3 -1 roll mul add srgb}
  bind def
/shd {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
  4 -2 roll mul srgb} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y tr xrad yrad sc 0 0 1 startangle endangle arc
	closepath
	savematrix setmatrix
	} def

/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

/pageheader {
save
newpath 0 514 moveto 0 0 lineto 571 0 lineto 571 514 lineto closepath clip newpath
-111.5 568.8 translate
1 -1 scale
$F2psBegin
10 setmiterlimit
0 slj 0 slc
 0.06299 0.06299 sc
} bind def
/pagefooter {
$F2psEnd
restore
} bind def
%%EndProlog
pageheader
%
% Fig objects follow
%
% 
% here starts figure with depth 50
% Polyline
2 slj
0 slc
0.000 slw
n 6930 3600 m 6895 3605 l 6862 3611 l 6834 3617 l 6810 3622 l 6791 3626 l
 6777 3629 l 6766 3632 l 6757 3635 l 6750 3638 l 6743 3640 l
 6734 3643 l 6723 3647 l 6709 3651 l 6690 3656 l 6666 3663 l
 6638 3671 l 6605 3680 l 6570 3690 l 6532 3701 l 6499 3711 l
 6473 3719 l 6454 3725 l 6442 3729 l 6434 3732 l 6430 3734 l
 6428 3735 l 6425 3736 l 6421 3738 l 6414 3741 l 6403 3745 l
 6386 3751 l 6362 3759 l 6333 3769 l 6300 3780 l 6267 3791 l
 6238 3801 l 6214 3808 l 6196 3813 l 6183 3816 l 6174 3817 l
 6169 3818 l 6165 3818 l 6161 3817 l 6156 3818 l 6147 3820 l
 6134 3824 l 6116 3831 l 6092 3841 l 6063 3854 l 6030 3870 l
 6001 3885 l 5974 3900 l 5951 3913 l 5933 3924 l 5919 3933 l
 5910 3939 l 5903 3945 l 5899 3949 l 5895 3953 l 5891 3956 l
 5887 3961 l 5880 3966 l 5871 3974 l 5857 3984 l 5839 3997 l
 5816 4012 l 5789 4030 l 5760 4050 l 5730 4070 l 5703 4088 l
 5680 4103 l 5660 4116 l 5645 4126 l 5633 4134 l 5624 4139 l
 5616 4144 l 5610 4148 l 5604 4151 l 5597 4155 l 5589 4161 l
 5578 4167 l 5565 4176 l 5550 4187 l 5531 4200 l 5511 4215 l
 5490 4230 l 5463 4250 l 5444 4265 l 5431 4272 l 5425 4274 l
 5423 4272 l 5423 4267 l 5423 4263 l 5423 4262 l 5420 4265 l
 5415 4275 l 5408 4293 l 5400 4320 l 5395 4343 l 5392 4366 l
 5390 4388 l 5389 4406 l 5389 4421 l 5390 4434 l 5391 4445 l
 5393 4455 l 5394 4465 l 5396 4476 l 5397 4489 l 5398 4504 l
 5399 4522 l 5400 4544 l 5400 4567 l 5400 4590 l 5400 4627 l
 5400 4645 l 5400 4648 l 5400 4643 l 5400 4637 l 5400 4638 l
 5400 4651 l 5400 4680 l 5400 4703 l 5399 4722 l 5398 4737 l
 5397 4746 l 5395 4751 l 5392 4755 l 5391 4759 l 5389 4766 l
 5389 4778 l 5390 4797 l 5394 4825 l 5400 4860 l 5406 4888 l
 5413 4914 l 5419 4936 l 5424 4953 l 5428 4966 l 5432 4975 l
 5435 4982 l 5438 4988 l 5440 4993 l 5444 5000 l 5448 5010 l
 5453 5024 l 5460 5043 l 5469 5067 l 5479 5097 l 5490 5130 l
 5501 5163 l 5511 5192 l 5518 5215 l 5523 5231 l 5526 5241 l
 5527 5247 l 5528 5249 l 5528 5250 l 5527 5251 l 5528 5254 l
 5530 5261 l 5534 5273 l 5541 5293 l 5551 5321 l 5564 5357 l
 5580 5400 l 5592 5433 l 5605 5466 l 5616 5496 l 5627 5524 l
 5636 5548 l 5644 5569 l 5651 5587 l 5657 5603 l 5661 5616 l
 5666 5628 l 5670 5640 l 5674 5651 l 5679 5663 l 5683 5676 l
 5689 5691 l 5696 5708 l 5704 5727 l 5713 5748 l 5724 5772 l
 5735 5798 l 5748 5824 l 5760 5850 l 5769 5868 l 5778 5885 l
 5785 5899 l 5791 5911 l 5796 5921 l 5799 5929 l 5801 5936 l
 5801 5941 l 5801 5946 l 5800 5949 l 5798 5951 l 5796 5953 l
 5793 5954 l 5790 5955 l 5787 5956 l 5785 5956 l 5783 5956 l
 5781 5956 l 5781 5957 l 5782 5957 l 5784 5956 l 5787 5956 l
 5793 5955 l 5800 5954 l 5810 5952 l 5821 5950 l 5835 5946 l
 5850 5940 l 5873 5930 l 5897 5917 l 5920 5904 l 5940 5892 l
 5958 5880 l 5973 5869 l 5985 5860 l 5996 5851 l 6006 5843 l
 6015 5835 l 6024 5827 l 6034 5818 l 6046 5808 l 6060 5796 l
 6077 5781 l 6097 5764 l 6121 5745 l 6148 5722 l 6178 5697 l
 6210 5670 l 6244 5641 l 6274 5614 l 6299 5592 l 6318 5574 l
 6332 5562 l 6341 5553 l 6347 5548 l 6350 5545 l 6353 5542 l
 6355 5540 l 6358 5537 l 6363 5531 l 6372 5522 l 6384 5508 l
 6402 5489 l 6424 5464 l 6451 5434 l 6480 5400 l 6507 5369 l
 6531 5339 l 6553 5312 l 6571 5289 l 6586 5270 l 6598 5255 l
 6606 5243 l 6613 5234 l 6618 5227 l 6623 5220 l 6627 5213 l
 6632 5206 l 6638 5197 l 6646 5185 l 6657 5170 l 6670 5151 l
 6686 5128 l 6706 5101 l 6727 5071 l 6750 5040 l 6774 5006 l
 6795 4976 l 6812 4952 l 6826 4935 l 6835 4923 l 6841 4916 l
 6845 4912 l 6846 4912 l 6848 4913 l 6850 4912 l 6853 4909 l
 6858 4901 l 6867 4888 l 6878 4868 l 6893 4841 l 6910 4808 l
 6930 4770 l 6946 4737 l 6961 4705 l 6975 4675 l 6987 4649 l
 6997 4628 l 7005 4610 l 7012 4595 l 7017 4584 l 7021 4575 l
 7024 4567 l 7028 4560 l 7030 4553 l 7034 4545 l 7038 4535 l
 7042 4523 l 7048 4507 l 7055 4487 l 7064 4462 l 7074 4433 l
 7085 4399 l 7098 4360 l 7110 4320 l 7123 4276 l 7134 4234 l
 7144 4198 l 7152 4167 l 7158 4142 l 7162 4123 l 7165 4108 l
 7167 4097 l 7169 4088 l 7170 4080 l 7171 4072 l 7172 4064 l
 7173 4053 l 7175 4039 l 7178 4022 l 7181 4000 l 7185 3973 l
 7190 3941 l 7195 3906 l 7200 3870 l 7205 3827 l 7208 3790 l
 7210 3761 l 7211 3738 l 7211 3722 l 7210 3711 l 7209 3703 l
 7208 3698 l 7206 3692 l 7204 3686 l 7203 3678 l 7202 3668 l
 7201 3654 l 7200 3637 l 7200 3618 l 7200 3600 l 7200 3594 l
 7200 3588 l 7200 3583 l 7200 3579 l 7201 3575 l 7201 3572 l
 7202 3570 l 7203 3568 l 7204 3567 l 7205 3567 l 7207 3567 l
 7208 3567 l 7210 3567 l 7211 3568 l 7213 3569 l 7215 3571 l
 7217 3572 l 7219 3574 l 7221 3576 l 7223 3578 l 7224 3579 l
 7226 3581 l 7228 3583 l 7229 3585 l 7231 3587 l 7232 3589 l
 7233 3590 l 7233 3592 l 7233 3593 l 7233 3595 l 7233 3596 l
 7232 3597 l 7230 3598 l 7228 3599 l 7225 3599 l 7221 3600 l
 7217 3600 l 7212 3600 l 7206 3600 l 7200 3600 l 7182 3600 l
 7163 3600 l 7145 3599 l 7131 3598 l 7119 3597 l 7109 3596 l
 7102 3594 l 7095 3593 l 7088 3591 l 7079 3590 l 7067 3589 l
 7051 3589 l 7029 3590 l 7002 3592 l 6968 3595 l
 cp gs /PC [[1.00 1.00 1.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P6 [16 0 0 -16 359.27 237.80] PATmp PATsp ef gr PATusp 
% Ellipse
45.000 slw
 [90] 0 sd
n 4500 3600 2700 2700 0 360 DrawEllipse gs col0 s gr
 [] 0 sd
% Ellipse
 [15 135] 135 sd
1 slc
n 8100 4500 2700 2700 0 360 DrawEllipse gs col0 s gr
 [] 0 sd
% Ellipse
 [210 105 15 105] 0 sd
n 7200 6300 2700 2700 0 360 DrawEllipse gs col0 s gr
 [] 0 sd
% Ellipse
7.500 slw
n 6210 4680 255 255 0 360 DrawEllipse gs /PC [[0.00 0.00 0.00] [0.00 0.00 0.00]] def
15.00 15.00 sc P6 [16 0 0 -16 397.00 295.00] PATmp PATsp ef gr PATusp gs col0 s gr

% here ends figure;
pagefooter
showpage
%%Trailer
end
%EOF
